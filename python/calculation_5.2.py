# -*- coding: utf-8 -*-
import math
import os
import sys

import numpy as np
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QComboBox
from matplotlib import pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

# Form implementation generated from reading ui file 'Demo.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

lo = 107880
no = 150000
hi = 181400
Vcr_1 = 310
Vcr_2 = 310
Rho_ = 1.225
# 国际单位制的V = Vcr * knots_to_maps
knots_to_mps = 1.852 * (1000 / 3600)
m_to_nam = 44.4822
# 英尺转化为m
height_convert = 0.3048
a_ = 340.292
K = 1.4
Sw = 283.3
Cf1 = 0.763
Cf2 = 1430
Cfc = 1.0347
CD_0 = 0.014
CD_2 = 0.049


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1800, 1080)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(Form)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_1 = QtWidgets.QVBoxLayout()
        self.verticalLayout_1.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_1.setSpacing(0)
        self.verticalLayout_1.setObjectName("verticalLayout_1")
        self.label_1 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(99)
        sizePolicy.setHeightForWidth(self.label_1.sizePolicy().hasHeightForWidth())
        self.label_1.setSizePolicy(sizePolicy)
        self.label_1.setMinimumSize(QtCore.QSize(0, 50))
        self.label_1.setObjectName("label_1")
        self.verticalLayout_1.addWidget(self.label_1)
        # self.listView = QtWidgets.QListView(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)

        self.figure_1 = plt.figure()
        self.canvas_1 = FigureCanvas(self.figure_1)
        self.canvas_1.setSizePolicy(sizePolicy)
        self.verticalLayout_1.addWidget(self.canvas_1)

        self.pushButton_fig = QtWidgets.QPushButton(Form)
        self.pushButton_fig.setObjectName("pushButton_fig")
        self.verticalLayout_1.addWidget(self.pushButton_fig)

        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")

        self.input_box = QtWidgets.QLineEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_box.sizePolicy().hasHeightForWidth())
        self.input_box.setSizePolicy(sizePolicy)
        self.input_box.setMinimumSize(QtCore.QSize(10, 0))
        self.input_box.setMaximumSize(QtCore.QSize(1111, 35))
        self.input_box.setObjectName("input_box")
        self.input_box.setPlaceholderText("请输入高度：")
        self.verticalLayout_4.addWidget(self.input_box)

        self.input_box_ = QtWidgets.QLineEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_box_.sizePolicy().hasHeightForWidth())
        self.input_box_.setSizePolicy(sizePolicy)
        self.input_box_.setMinimumSize(QtCore.QSize(10, 0))
        self.input_box_.setMaximumSize(QtCore.QSize(1111, 35))
        self.input_box_.setObjectName("input_box_")
        self.input_box_.setPlaceholderText("请输入重量：")
        self.verticalLayout_4.addWidget(self.input_box_)

        self.output_box = QtWidgets.QTextEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.output_box.sizePolicy().hasHeightForWidth())
        self.output_box.setSizePolicy(sizePolicy)
        self.output_box.setMinimumSize(QtCore.QSize(10, 0))
        self.output_box.setMaximumSize(QtCore.QSize(1111, 200))
        self.output_box.setReadOnly(True)  # 设置为只读模式，防止用户编辑
        self.output_box.setObjectName("output_box")
        self.verticalLayout_4.addWidget(self.output_box)

        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_4.addWidget(self.pushButton)
        self.verticalLayout_1.addLayout(self.verticalLayout_4)
        self.horizontalLayout.addLayout(self.verticalLayout_1)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_2 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(0, 50))
        self.label_2.setObjectName("label_2")
        self.verticalLayout_7.addWidget(self.label_2)
        # self.graphicsView_2 = QtWidgets.QGraphicsView(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        self.figure_2 = plt.figure()
        self.canvas_2 = FigureCanvas(self.figure_2)
        self.canvas_2.setSizePolicy(sizePolicy)
        self.verticalLayout_7.addWidget(self.canvas_2)
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")


        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setMinimumSize(QtCore.QSize(10, 0))
        self.comboBox.setMaximumSize(QtCore.QSize(1111, 35))
        self.comboBox.setObjectName("input_box_21")
        self.comboBox.addItem("kt")
        self.comboBox.addItem("m/s")
        self.verticalLayout_13.addWidget(self.comboBox)

        self.input_box_2 = QtWidgets.QLineEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_box_2.sizePolicy().hasHeightForWidth())
        self.input_box_2.setSizePolicy(sizePolicy)
        self.input_box_2.setMinimumSize(QtCore.QSize(10, 0))
        self.input_box_2.setMaximumSize(QtCore.QSize(1111, 35))
        self.input_box_2.setObjectName("input_box_2")
        self.input_box_2.setPlaceholderText("请输入速度：")
        self.verticalLayout_13.addWidget(self.input_box_2)





        self.input_box_2_ = QtWidgets.QLineEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_box_2_.sizePolicy().hasHeightForWidth())
        self.input_box_2_.setSizePolicy(sizePolicy)
        self.input_box_2_.setMinimumSize(QtCore.QSize(10, 0))
        self.input_box_2_.setMaximumSize(QtCore.QSize(1111, 35))
        self.input_box_2_.setObjectName("input_box_2_")
        self.input_box_2_.setPlaceholderText("请输入重量：")
        self.verticalLayout_13.addWidget(self.input_box_2_)

        self.output_box_2 = QtWidgets.QTextEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.output_box_2.sizePolicy().hasHeightForWidth())
        self.output_box_2.setSizePolicy(sizePolicy)
        self.output_box_2.setMinimumSize(QtCore.QSize(10, 0))
        self.output_box_2.setMaximumSize(QtCore.QSize(1111, 200))
        self.output_box_2.setReadOnly(True)  # 设置为只读模式，防止用户编辑
        self.output_box_2.setObjectName("output_box_2")
        self.verticalLayout_13.addWidget(self.output_box_2)

        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setObjectName("pushButton_2")

        self.verticalLayout_13.addWidget(self.pushButton_2)
        self.verticalLayout_7.addLayout(self.verticalLayout_13)
        self.horizontalLayout.addLayout(self.verticalLayout_7)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setContentsMargins(-1, -1, 0, -1)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_3 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setMinimumSize(QtCore.QSize(0, 50))
        self.label_3.setObjectName("label_3")
        self.verticalLayout_5.addWidget(self.label_3)
        # self.graphicsView_3 = QtWidgets.QGraphicsView(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(self.graphicsView_3.sizePolicy().hasHeightForWidth())
        # self.graphicsView_3.setSizePolicy(sizePolicy)
        # self.graphicsView_3.setObjectName("graphicsView_3")
        # self.verticalLayout_5.addWidget(self.graphicsView_3)
        self.figure_3 = plt.figure()
        self.canvas_3 = FigureCanvas(self.figure_3)
        self.canvas_3.setSizePolicy(sizePolicy)
        self.verticalLayout_5.addWidget(self.canvas_3)
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")

        self.input_box_3 = QtWidgets.QLineEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_box_3.sizePolicy().hasHeightForWidth())
        self.input_box_3.setSizePolicy(sizePolicy)
        self.input_box_3.setMinimumSize(QtCore.QSize(10, 0))
        self.input_box_3.setMaximumSize(QtCore.QSize(1111, 35))
        self.input_box_3.setObjectName("input_box_3")
        self.input_box_3.setPlaceholderText("请输入高度：")
        self.verticalLayout_14.addWidget(self.input_box_3)

        self.input_box_3_ = QtWidgets.QLineEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.input_box_3_.sizePolicy().hasHeightForWidth())
        self.input_box_3_.setSizePolicy(sizePolicy)
        self.input_box_3_.setMinimumSize(QtCore.QSize(10, 0))
        self.input_box_3_.setMaximumSize(QtCore.QSize(1111, 35))
        self.input_box_3_.setObjectName("input_box_3_")
        self.input_box_3_.setPlaceholderText("请输入重量：")
        self.verticalLayout_14.addWidget(self.input_box_3_)

        self.output_box_3 = QtWidgets.QTextEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.output_box_3.sizePolicy().hasHeightForWidth())
        self.output_box_3.setSizePolicy(sizePolicy)
        self.output_box_3.setMinimumSize(QtCore.QSize(10, 0))
        self.output_box_3.setMaximumSize(QtCore.QSize(1111, 200))
        self.output_box_3.setReadOnly(True)  # 设置为只读模式，防止用户编辑
        self.output_box_3.setObjectName("output_box_3")
        self.verticalLayout_14.addWidget(self.output_box_3)

        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_14.addWidget(self.pushButton_3)

        self.pushButton.clicked.connect(self.check_inputs_1)
        self.pushButton_2.clicked.connect(self.check_inputs_2)
        self.pushButton_3.clicked.connect(self.check_inputs_3)
        self.pushButton_fig.clicked.connect(self.openFile)

        self.pushButton_fig.setGeometry(50, 50, 100, 30)

        self.verticalLayout_5.addLayout(self.verticalLayout_14)
        self.horizontalLayout.addLayout(self.verticalLayout_5)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("BADA MODEL", "BADA MODEL"))
        self.label_1.setText(_translate("Form", "一.输入重量和高度，获得各参数"))
        self.pushButton.setText(_translate("Form", "计算参数"))
        self.pushButton_fig.setText(_translate("Form", "展示图表"))
        self.label_2.setText(_translate("Form", "二.选定最佳高度，输入重量和速度，找出最大燃油里程及最佳高度"))
        self.pushButton_2.setText(_translate("Form", "计算并绘图"))
        self.label_3.setText(_translate("Form", "三.选定最佳巡航速度，输入重量和高度，找出最大燃油里程及最佳速度"))
        self.pushButton_3.setText(_translate("Form", "计算并绘图"))

    def openFile(self):
        # 获取当前目录
        current_dir = os.path.dirname(os.path.realpath(__file__))
        # 拼接文件路径
        file_path = os.path.join(current_dir, 'output.xlsx')
        # 使用默认程序打开文件
        os.startfile(file_path)
    def check_inputs_1(self):
        # 获取输入框的文本内容
        input_text_1 = self.input_box_.text()
        input_text_2 = self.input_box.text()

        # 检查输入框是否为空
        if not input_text_1 or not input_text_2:
            msg_box = QMessageBox(QMessageBox.Warning, 'Warning', '输入不能为空！！')
            msg_box.exec_()
            # 如果输入框为空，弹出一个警告对话框
        elif float(self.input_box.text()) > 43000 or float(self.input_box.text()) < 3000:
            msg_box = QMessageBox(QMessageBox.Warning, 'Warning', '请输入3000到43000之间的值！！')
            msg_box.exec_()
        else:
            # 如果输入框不为空，执行您的代码
            self.plot_1()

    def check_inputs_2(self):
        # 获取输入框的文本内容
        input_text_1 = self.input_box_2_.text()
        input_text_2 = self.input_box_2.text()

        # 检查输入框是否为空
        if not input_text_1 or not input_text_2:
            msg_box = QMessageBox(QMessageBox.Warning, 'Warning', '输入不能为空！！')
            msg_box.exec_()
            # 如果输入框为空，弹出一个警告对话框
        else:
            # 如果输入框不为空，执行您的代码
            self.plot_2()

    def check_inputs_3(self):
        # 获取输入框的文本内容
        input_text_1 = self.input_box_3_.text()
        input_text_2 = self.input_box_3.text()

        # 检查输入框是否为空
        if not input_text_1 or not input_text_2:
            msg_box = QMessageBox(QMessageBox.Warning, 'Warning', '输入不能为空！！')
            msg_box.exec_()
            # 如果输入框为空，弹出一个警告对话框
        elif float(self.input_box_3.text()) > 43000 or float(self.input_box_3.text()) < 3000:
            msg_box = QMessageBox(QMessageBox.Warning, 'Warning', '请输入3000到43000之间的值！！')
            msg_box.exec_()
        else:
            # 如果输入框不为空，执行代码
            self.plot_3()

    def plot_1(self):
        input_value = float(self.input_box.text())
        Mss = float(self.input_box_.text())
        H = input_value
        T_res = 0
        P_res = 0
        Rho_res = 0
        H_normal = H * height_convert
        # 输入的 H 为 kt 单位
        if 0 <= H <= 2999:
            Vcr = min(Vcr_1, 170)
        elif 3000 <= H <= 5999:
            Vcr = min(Vcr_1, 220)
        elif 6000 <= H <= 13999:
            Vcr = min(Vcr_1, 250)
        else:
            Vcr = Vcr_2

        if H_normal <= 11000:
            # 计算温度比T0
            T_res = (1 - 2.25577E-05 * H_normal)
            # 计算压力比∂
            P_res = (1 - 2.25577E-05 * H_normal) ** 5.25588
            # 计算密度比σ
            Rho_res = (1 - 2.25577E-05 * H_normal) ** 4.25588

        elif 11000 <= H_normal <= 20000:
            T_res = 0.75186535
            P_res = 0.2233609 * math.exp((11000 - H_normal) / 6341.62)
            Rho_res = 0.2970756 * math.exp((11000 - H_normal) / 6341.62)
        W = Mss
        Vc = Vcr * knots_to_mps
        # 计算真空速Vitas，拆分成局部声速和速度比修正因子两部分
        # 计算局部声速
        local_a = math.sqrt((2 / (K - 1)) * T_res)
        # 计算速度比修正因子
        correction_factor = ((1 + ((K - 1) * (Vc / a_) ** 2) / 2) ** (K / (K - 1)) - 1) / P_res + 1
        # 计算真空速
        Vitas = a_ * local_a * math.sqrt((correction_factor ** ((K - 1) / K)) - 1)

        Vitas_kt = Vitas / knots_to_mps

        # 计算马赫数，判断是否超过0.8,如果超过，计算新的MAH
        MAH = Vitas / a_ / math.sqrt(T_res)
        Mah = MAH
        if MAH >= 0.8:
            Vitas = 0.8 * a_ * math.sqrt(T_res)
            Vitas_kt = Vitas / knots_to_mps
            Mah = 0.8

        # 计算局部结果 CL CD Thr
        Rho = Rho_res * Rho_

        CL = 2 * W * 10 / (Rho * Vitas * Vitas * Sw)
        CD = CD_0 + CD_2 * CL * CL
        D = 0.5 * CD * Rho * Vitas * Vitas * Sw
        Thr = D

        # 计算燃油流量Fuel
        fu = Cf1 * (1 + Vitas_kt / Cf2)
        Fuel = fu * Cfc * Thr / 1000

        output_text_1 = ("当前重量： {} kg\n当前高度： {} ft\n真空速 Vitas: {} m/s\nCL: {}\nCD: {}\nThr: {}\nFU： {}\n燃油流量 Fuel: {"
                         "}\n马赫数 M: {}").format(
            W, H, Vitas, CL, CD, Thr, fu, Fuel, Mah)
        self.output_box.setPlainText(output_text_1)

    def plot_2(self):
        try:
            input_value = float(self.input_box_2.text())
        except ValueError:
            # 如果输入不是浮点数，弹出一个消息框
            QtWidgets.QMessageBox.warning(self, "警告", "输入不能为空！")
            return  # 结束方法

        # input_value = float(self.input_box.text())
        Mss = float(self.input_box_2_.text())

        selected_value = self.comboBox.currentText()
        if selected_value == "kt":
            print("Option 1 is selected")
            input_value = input_value * knots_to_mps
            # 执行 Option 1 的操作
        elif selected_value == "m/s":
            print("Option 2 is selected")
            # 执行 Option 2 的操作

        # 组别索引
        res_list_x = []
        res_list_y = []
        H_range = np.arange(3000, 43000, 1)

        Vitas = input_value
        # Vitas = input_value
        Vitas_kt = Vitas / knots_to_mps

        print('当前速度为: {}'.format(Vitas) + 'm/s')
        output_text = "当前速度为：{}".format(Vitas) + "m/s"
        self.output_box_2.setPlainText(output_text)

        print('当前重量为: {}'.format(Mss) + 'kg')
        output_text_1 = "当前重量为：{}".format(Mss) + "kg"
        self.output_box_2.setPlainText(output_text_1)

        M = Mss
        # 建一个max表，用于输出答案
        max_x = []
        max_y = []

        # 在每个重量循环中建立两个新的空列表，存储每个重量对应的图像中的横纵坐标
        current_x = []
        current_y = []

        # 对于每个高度，计算其对应的燃油里程
        for H in H_range:
            T_res = 0
            P_res = 0
            Rho_res = 0
            H_normal = H * height_convert
            # 输入的 H 为 kt 单位
            if 0 <= H <= 2999:
                Vcr = min(Vcr_1, 170)
            elif 3000 <= H <= 5999:
                Vcr = min(Vcr_1, 220)
            elif 6000 <= H <= 13999:
                Vcr = min(Vcr_1, 250)
            else:
                Vcr = Vcr_2

            if H_normal <= 11000:
                # 计算温度比T0
                T_res = (1 - 2.25577E-05 * H_normal)
                # 计算压力比∂
                P_res = (1 - 2.25577E-05 * H_normal) ** 5.25588
                # 计算密度比σ
                Rho_res = (1 - 2.25577E-05 * H_normal) ** 4.25588

            elif 11000 <= H_normal <= 20000:
                T_res = 0.75186535
                P_res = 0.2233609 * math.exp((11000 - H_normal) / 6341.62)
                Rho_res = 0.2970756 * math.exp((11000 - H_normal) / 6341.62)

            Rho = Rho_res * Rho_
            CL = 2 * M * 10 / (Rho * Vitas * Vitas * Sw)
            CD = CD_0 + CD_2 * CL * CL
            D = 0.5 * CD * Rho * Vitas * Vitas * Sw
            Thr = D

            # 计算燃油流量Fuel
            fu = Cf1 * (1 + Vitas_kt / Cf2)
            Fuel = fu * Cfc * Thr / 1000

            # 海里里程 /60 表示从分钟到秒，*表示转换m/kg到nam/lb
            Distance = Vitas / Fuel * m_to_nam / 60
            My_distance = int(Distance * 1000) / 1000

            # 计算完毕，在横坐标列表中添加燃油里程，纵坐标列表中添加高度H
            current_x.append(My_distance)
            current_y.append(H)

        max_distance = max(current_x)
        # 获取最大燃油里程对应的索引，以便找出最佳的飞行高度
        index_current = current_x.index(max_distance)

        # 打印计算结果
        print('对于重量为 ' + str(M) + ' 的飞机：最大燃油里程为：{}'.format(
            max_distance) + ' nam/lb' + ' 对应的最佳飞行高度为：{}'.format(current_y[index_current]) + ' ft')
        res_list_x.append(current_x)
        res_list_y.append(current_y)

        max_x.append(max_distance)
        max_y.append(current_y[index_current])

        self.canvas_2.figure.clf()  # 清空图表
        self.canvas_2.draw()  # 更新图表显示
        ax = self.figure_2.add_axes([0.15, 0.15, 0.8, 0.8])
        ax.clear()
        ax.plot(res_list_x[0], res_list_y[0])

        ax.set_xlabel("nam/lb")
        ax.set_ylabel('H (ft)')
        ax.set_title('Curve Plot of Distance vs Height for Different Weight')
        self.canvas_2.draw()
        output_text_2 = '对于重量为' + str(Mss) + 'kg 的飞机：当飞行速度为 ' + str(
            Vitas) + ' m/s时\n' + '最大燃油里程为：{}'.format(
            max_distance) + ' nam/lb' + ' 对应的最佳飞行高度为：{}'.format(current_y[index_current]) + 'ft'
        self.output_box_2.setPlainText(output_text_2)

    def plot_3(self):
        try:
            input_value = float(self.input_box_3.text())
        except ValueError:
            # 如果输入不是浮点数，弹出一个消息框
            QtWidgets.QMessageBox.warning(self, "警告", "输入不能为空！")
            return  # 结束方法

        # input_value = float(self.input_box.text())
        Mss = float(self.input_box_3_.text())

        # 创建一个高度数组H_list, 自定义高度
        T_res = 0
        H = input_value

        # 分别构建两个列表，存储每张图的横纵坐标
        res_list_x = []
        res_list_y = []

        print('当前高度为: {}'.format(H) + ' ft')
        output_text = "当前高度为：{}".format(H) + "ft"
        self.output_box_3.setPlainText(output_text)

        # 每轮循环中初始化列表
        current_x = []
        current_y = []

        M = Mss

        # 马赫数的值从0.3到0.8中循环，步长为0.01
        for Mah in np.arange(0.3, 1.1, 0.0001):
            T_res = 0
            P_res = 0
            Rho_res = 0
            H_normal = H * height_convert
            # 输入的 H 为 kt 单位
            if 0 <= H <= 2999:
                Vcr = min(Vcr_1, 170)
            elif 3000 <= H <= 5999:
                Vcr = min(Vcr_1, 220)
            elif 6000 <= H <= 13999:
                Vcr = min(Vcr_1, 250)
            else:
                Vcr = Vcr_2

            if H_normal <= 11000:
                # 计算温度比T0
                T_res = (1 - 2.25577E-05 * H_normal)
                # 计算压力比∂
                P_res = (1 - 2.25577E-05 * H_normal) ** 5.25588
                # 计算密度比σ
                Rho_res = (1 - 2.25577E-05 * H_normal) ** 4.25588

            elif 11000 <= H_normal <= 20000:
                T_res = 0.75186535
                P_res = 0.2233609 * math.exp((11000 - H_normal) / 6341.62)
                Rho_res = 0.2970756 * math.exp((11000 - H_normal) / 6341.62)

            Vc = Vcr * knots_to_mps
            Vitas = Mah * a_ * math.sqrt(T_res)
            Vitas_kt = Vitas / knots_to_mps

            # 计算局部结果 CL CD Thr
            Rho = Rho_res * Rho_
            CL = 2 * M * 10 / (Rho * Vitas * Vitas * Sw)
            CD = CD_0 + CD_2 * CL * CL
            D = 0.5 * CD * Rho * Vitas * Vitas * Sw
            Thr = D

            # 计算燃油流量Fuel
            fu = Cf1 * (1 + Vitas_kt / Cf2)
            Fuel = fu * Cfc * Thr / 1000

            # 海里里程 /60 表示从分钟到秒，*表示转换m/kg到nam/lb
            Distance = Vitas / Fuel * m_to_nam / 60
            My_distance = int(Distance * 1000) / 1000

            # 曲线图
            current_x.append(Mah)
            current_y.append(My_distance)

        # 找出最大的燃油里程
        max_distance = max(current_y)

        # 通过最大的燃油里程对应的索引，确定此时马赫数
        index_current = current_y.index(max_distance)

        Optimal_Mah = current_x[index_current]

        # 保留四位小数
        My_Optimal_Mah = int(Optimal_Mah * 10000) / 10000

        # 打印计算结果
        print('重量为 ' + str(M) + ' 的组别中：最大燃油里程为：{}'.format(
            max_distance) + ' nam/lb' + ' 对应的最佳马赫数为：{}'.format(My_Optimal_Mah))
        res_list_x.append(current_x)
        res_list_y.append(current_y)

        self.canvas_3.figure.clf()  # 清空图表
        self.canvas_3.draw()  # 更新图表显示
        ax = self.figure_3.add_axes([0.15, 0.15, 0.8, 0.8])
        ax.clear()

        ax.plot(res_list_x[0], res_list_y[0])

        output_text_1 = '重量为 ' + str(M) + ' 的组别中：当飞行高度为 ' + str(H) + ' ft时，最大燃油里程为：{}'.format(
            max_distance) + ' nam/lb' + ' 对应的最佳马赫数为：{}'.format(My_Optimal_Mah)
        self.output_box_3.setPlainText(output_text_1)

        ax.set_xlabel("Mah")
        ax.set_ylabel('nam/lb')
        ax.set_title('Curve Plot of Fuel vs Height for Different Masses')
        self.canvas_3.draw()


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QDialog()
    ui = Ui_Form()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())